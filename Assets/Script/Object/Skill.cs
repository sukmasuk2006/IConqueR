//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
[System.Serializable]
public class Skill
{
	private string name;
	private int heroesRequired;
	private int id;
	private int type;
	private SkillEffect effect;
	private bool isUnlocked;
	private string[] linesFromFile;
	private bool isSelected;
	private float levelRequired;
	private int price;
	private string desc;

	public Skill (int level, string nm)
	{
		this.name = nm;
		this.id = level;
		isUnlocked = false;
		isSelected = false;
		InitializeSkill ();
		//Debug.Log ("Skill initilaized !");
		//Debug.Log (name + " " + desc + " " + effect.Amount);
	}

	private void InitializeSkill(){
		linesFromFile = null;
		TextAsset txt = (TextAsset)Resources.Load ("Data/Skill/"+ name.Trim(), typeof(TextAsset));
		price = 1000 * (id+1);
		string content = txt.text;
		linesFromFile = content.Split ("\n" [0]);
		heroesRequired = int.Parse (linesFromFile [0]);
		int.TryParse(linesFromFile [1],out type);
		effect = new SkillEffect (int.Parse(linesFromFile [2]),
		                          int.Parse(linesFromFile [3]));
		levelRequired = float.Parse (linesFromFile [4]);

	}

	public void Save(){
		PlayerPrefs.SetInt ("Skill"+id+"isUnlocked" + GameData.tesId, isUnlocked ? 1:0);	
		PlayerPrefs.SetInt ("Skill"+id+"isSelected" + GameData.tesId, isSelected ? 1 : 0);	
	}
	
	public void Load(){
		isUnlocked  = (PlayerPrefs.GetInt ("Skill"+id+"isUnlocked" + GameData.tesId)!=0);	
		isSelected = (PlayerPrefs.GetInt ("Skill"+id+"isSelected" + GameData.tesId)!=0);	
//		Debug.Log ("slot u " + isUnlocked + " s " + isSelected);
	}

	public void DoEffect(Unit u){
		int tipe = effect.Tipe;
		switch (tipe) {
		case 1 :  u.DefensePoint+= (effect.Amount / 100)* u.DefensePoint;   // knight
			break; 
		case 2 : u.AttackPoint+= (effect.Amount / 100)* u.AttackPoint; // warrior
			break;
		case 3 :  u.AttackSpeed -= (effect.Amount / 100)* u.AttackSpeed;
			break;
		case 4 :  u.EvasionRate+= (effect.Amount / 100)* u.EvasionRate; // sek
		break;	
		case 5 :  u.Critical+= (effect.Amount / 100)* u.Critical;   
			break; 
		case 6 : u.AttackPoint+= (effect.Amount / 200)* u.AttackPoint;
				u.DefensePoint+= (effect.Amount / 200)* u.DefensePoint;   // knight
			break;
		case 7 : u.AttackSpeed+= (effect.Amount / 100)* u.AttackSpeed;   
			u.Critical+= (effect.Amount / 100)* u.Critical;   
			u.EvasionRate+= (effect.Amount / 100)* u.EvasionRate;
			break;
		case 8 : u.AttackPoint+= (effect.Amount / 100)* u.AttackPoint;
			u.AttackSpeed+= (effect.Amount / 100)* u.AttackSpeed;   
			u.EvasionRate+= (effect.Amount / 100)* u.EvasionRate;
			break;
		case 9 :  u.AttackPoint+= (effect.Amount / 100)* u.AttackPoint;
			u.AttackSpeed+= (effect.Amount / 100)* u.AttackSpeed;   
			u.EvasionRate+= (effect.Amount / 100)* u.EvasionRate;
			u.Critical+= (effect.Amount / 100)* u.Critical;   
			break;
		case 10 :  u.AttackPoint+= (effect.Amount / 100)* u.AttackPoint;
			u.AttackSpeed+= (effect.Amount / 100)* u.AttackSpeed;   
			u.EvasionRate+= (effect.Amount / 100)* u.EvasionRate;
			u.Critical+= (effect.Amount / 100)* u.Critical;  
			u.DefensePoint+= (effect.Amount / 100)* u.DefensePoint;   // knight
			break;
		}
	}

	public bool IsSelected {
		get {
			return isSelected;
		}
		set {
			isSelected = value;
		}
	}

	public SkillEffect Effect {
		get {
			return effect;
		}
		set {
			effect = value;
		}
	}

	public string Name {
		get {
			return name;
		}
		set {
			name = value;
		}
	}

	public int HeroesRequired {
		get {
			return heroesRequired;
		}
		set {
			heroesRequired = value;
		}
	}

	public int Id {
		get {
			return id;
		}
		set {
			id = value;
		}
	}

	public int Type {
		get {
			return type;
		}
		set {
			type = value;
		}
	}

	public bool IsUnlocked {
		get {
			return isUnlocked;
		}
		set {
			isUnlocked = value;
		}
	}

	public float LevelRequired {
		get {
			return levelRequired;
		}
		set {
			levelRequired = value;
		}
	}

	public int Price {
		get {
			return price;
		}
		set {
			price = value;
		}
	}
}


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;

public class Skill
{
	private string name;
	private int heroesRequired;
	private int id;
	private int level;
	private SkillEffect activeEffect;
	private SkillEffect passiveEffect;
	private bool isUnlocked;
	private string[] linesFromFile;
	private bool isSelected;
	private float range;
	private int price;
	private string desc;
	private int base_Price = 1000;

	public Skill (int id, string nm)
	{
		level = 0;
		this.name = nm;
		this.id = id;
		isUnlocked = false;
		isSelected = false;
		InitializeSkill ();
		//Debug.Log ("Skill initilaized !");
		//Debug.Log (name + " " + desc + " " + effect.Amount);
	}

	private void InitializeSkill(){
		linesFromFile = null;
		TextAsset txt = (TextAsset)Resources.Load ("Data/Skill/"+ name.Trim(), typeof(TextAsset));
		base_Price = 1000 * (id+1); 
		SetPrice();
		string content = txt.text;
		linesFromFile = content.Split ("\n" [0]);
		heroesRequired = int.Parse (linesFromFile [0]);
		activeEffect = new SkillEffect(int.Parse(linesFromFile[1]),int.Parse(linesFromFile[2]));
		passiveEffect = new SkillEffect (int.Parse(linesFromFile [3]),
		                          int.Parse(linesFromFile [4]));
		range = float.Parse (linesFromFile [5]);

	}

	public void Save(){
		PlayerPrefs.SetInt ("Skill"+id+"isUnlocked" + GameData.tesId, isUnlocked ? 1:0);	
		PlayerPrefs.SetInt ("Skill"+id+"isSelected" + GameData.tesId, isSelected ? 1 : 0);	
		PlayerPrefs.SetInt ("Skill"+id+"level" + GameData.tesId, level);
	}
	
	public void Load(){
		isUnlocked  = (PlayerPrefs.GetInt ("Skill"+id+"isUnlocked" + GameData.tesId)!=0);	
		isSelected = (PlayerPrefs.GetInt ("Skill"+id+"isSelected" + GameData.tesId)!=0);	
			level = PlayerPrefs.GetInt("Skill"+id+"level"+ GameData.tesId);
		SetPrice();
		//		Debug.Log ("slot u " + isUnlocked + " s " + isSelected);
	}

	private void SetPrice(){
		price = base_Price * (level+1);
	}

	public void DoPassiveEffect(Unit u){
		int tipe = passiveEffect.Tipe;
		switch (tipe) {
		case 1 :  u.DefensePoint+= (passiveEffect.Amount * level / 100)* u.DefensePoint;   // knight
			break; 
		case 2 : u.AttackPoint+= (passiveEffect.Amount * level / 100)* u.AttackPoint; // warrior
			break;
		case 3 :  u.AttackSpeed -= (passiveEffect.Amount * level/ 100)* u.AttackSpeed;
			break;
		case 4 :  u.EvasionRate+= (passiveEffect.Amount * level/ 100)* u.AttackPoint; // sek
		break;	
		case 5 :  u.Critical+= (passiveEffect.Amount * level / 100)* u.Critical;   
			break; 
		case 6 : u.AttackPoint+= (passiveEffect.Amount* level / 100)* u.AttackPoint;
			u.DefensePoint+= (passiveEffect.Amount* level / 100)* u.DefensePoint;   // knight
			break;
		case 7 : u.AttackSpeed+= (passiveEffect.Amount* level / 100)* u.AttackSpeed;   
			u.Critical+= (passiveEffect.Amount* level / 100)* u.Critical;   
			u.EvasionRate+= (passiveEffect.Amount* level / 100)* u.EvasionRate;
			break;
		case 8 : u.AttackPoint+= (passiveEffect.Amount * level/ 100)* u.AttackPoint;
			u.AttackSpeed+= (passiveEffect.Amount* level / 100)* u.AttackSpeed;   
			u.EvasionRate+= (passiveEffect.Amount* level / 100)* u.EvasionRate;
			break;
		case 9 :  u.AttackPoint+= (passiveEffect.Amount* level / 100)* u.AttackPoint;
			u.AttackSpeed+= (passiveEffect.Amount * level/ 100)* u.AttackSpeed;   
			u.EvasionRate+= (passiveEffect.Amount * level/ 100)* u.EvasionRate;
			u.Critical+= (passiveEffect.Amount* level / 100)* u.Critical;   
			break;
		case 10 :  u.AttackPoint+= (passiveEffect.Amount* level / 100)* u.AttackPoint;
			u.AttackSpeed+= (passiveEffect.Amount* level / 100)* u.AttackSpeed;   
			u.EvasionRate+= (passiveEffect.Amount* level / 100)* u.EvasionRate;
			u.Critical+= (passiveEffect.Amount* level / 100)* u.Critical;  
			u.DefensePoint+= (passiveEffect.Amount* level / 100)* u.DefensePoint;   // knight
			break;
		}
	}

	public float DoActiveEffect(float heroDamage, Unit u){
		int tipe = activeEffect.Tipe;
		//foreach ( Uni
		float damageRet = 0f;
		switch (tipe) {
			case 1 :  damageRet = ((activeEffect.Amount * level / 200)* heroDamage) + heroDamage;   // atk
				break; 
			case 2 : damageRet = -((activeEffect.Amount * level / 200)* heroDamage) + heroDamage; // heal
				break;
		}
//		Debug.Log("special damage " + damageRet);
		return damageRet;

	}

	public bool IsInRange(float x1,float x2){
		bool ret = false;
//		Debug.Log("special range " + Mathf.Abs(x1-x2));

		if ( Mathf.Abs(x1-x2) <= range )
			return true;
		return ret;
	}

	public bool IsSelected {
		get {
			return isSelected;
		}
		set {
			isSelected = value;
		}
	}

	public SkillEffect Effect {
		get {
			return passiveEffect;
		}
		set {
			passiveEffect = value;
		}
	}

	public string Name {
		get {
			return name;
		}
		set {
			name = value;
		}
	}

	public int HeroesRequired {
		get {
			return heroesRequired;
		}
		set {
			heroesRequired = value;
		}
	}

	public int Id {
		get {
			return id;
		}
		set {
			id = value;
		}
	}

	public SkillEffect ActiveSkillEffect {
		get {
			return activeEffect;
		}
		set {
			activeEffect = value;
		}
	}

	public bool IsUnlocked {
		get {
			return isUnlocked;
		}
		set {
			isUnlocked = value;
		}
	}

	public float LevelRequired {
		get {
			return range;
		}
		set {
			range = value;
		}
	}

	public int Price {
		get {
			return price;
		}
		set {
			price = value;
		}
	}

	public int Level {
		get {
			return level;
		}
		set {
			level = value;
			SetPrice();
		}
	}
}

